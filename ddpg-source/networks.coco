from tensorflow.keras import layers

from ddpg.constants import (
    DENSE_NEURONS,
    DENSE_ACTIVATION,
    DROPOUT_RATE,
    ACTION_SCALE,
)
from ddpg.util import dense_with_batch_norm


def proc_obs(obs_input) =
    """Generate a model that processes an observation."""
    (
        obs_input
        |> dense_with_batch_norm(DENSE_NEURONS, DENSE_ACTIVATION)
        |> layers.Dropout(DROPOUT_RATE)
        |> dense_with_batch_norm(DENSE_NEURONS, DENSE_ACTIVATION)
        |> layers.Dropout(DROPOUT_RATE)
    )


def proc_obs_and_act(obs_input, act_input) =
    """Generate a model that processes an observation and an action."""
    (
        layers.Concatenate()([act_input, proc_obs(obs_input)])
        |> dense_with_batch_norm(DENSE_NEURONS, DENSE_ACTIVATION)
        |> layers.Dropout(DROPOUT_RATE)
        |> dense_with_batch_norm(DENSE_NEURONS, DENSE_ACTIVATION)
        |> layers.Dropout(DROPOUT_RATE)
    )


def get_actor(obs_input, act_dim, act_scale=ACTION_SCALE) =
    """Generate a DDPG actor model."""
    (
        obs_input
        |> proc_obs
        |> layers.Dense(act_dim, activation="tanh")
        |> layers.Lambda(x -> x * act_scale)
    )


def get_critic(obs_input, act_input) =
    """Generate a DDPG critic model."""
    (
        proc_obs_and_act(obs_input, act_input)
        |> layers.Dense(1, activation=None)
    )
