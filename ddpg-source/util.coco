import functools

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers


def dense_with_batch_norm(num_neurons, activation) =
    """Behaves as layers.Dense but includes BatchNormalization."""
    prev_layer -> (
        prev_layer
        |> layers.Dense(num_neurons, activation=None)
        |> layers.BatchNormalization()
        |> layers.Activation(activation)
    )


def batch_input(input_dim) =
    """Create a tensor for a batch of 1D inputs of the given length."""
    tf.placeholder(tf.float32, [None, input_dim], name=f"batch_input_{input_dim}")


def get_params_defined_in(param_def_func):
    """Gets all the trainable variables defined in the given function."""
    num_old_params = len(tf.trainable_variables())
    result = param_def_func()
    new_params = tf.trainable_variables()[num_old_params:]
    return new_params, result


def get_target_model_updater(target_params, base_params, update_weight=0.001) =
    """Gets an optimizer that can be used to soft update target_params with base_params."""
    [
        target_param.assign((1 - update_weight) * target_param + update_weight * base_param)
        for target_param, base_param in zip(target_params, base_params)
    ]


def ornstein_uhlenbeck_noise(mu, sigma=0.3, theta=0.15, dt=0.01):
    """Produces an iterator that outputs Ornstein-Uhlenbeck random noise."""
    x = np.zeros_like(mu)
    while True:
        x += theta * (mu - x) * dt + sigma * np.sqrt(dt) * np.random.randn(*mu.shape)
        yield x


def run_sess_with_opt(sess, opt, outputs=[], feed_dict={}):
    """Run a session including the given optimizer but excluding its output."""
    [_] + results = sess.run([opt] + outputs, feed_dict=feed_dict)
    return results


def run_with_sess(base_func):
    """Wrap base_func by providing a sess and automatically initializing global variables."""
    @functools.wraps(base_func)
    def sess_func(*args, **kwargs):
        sess = tf.Session()
        try:
            sess.run(tf.global_variables_initializer())
            return base_func(sess, *args, **kwargs)
        finally:
            sess.close()
    return sess_func
