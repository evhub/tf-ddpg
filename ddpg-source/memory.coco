import random
from collections import deque

import numpy as np


class ReplayMemory:
    """A buffer for storing (obs, action, reward, done) tuples."""

    def __init__(self, memory_size):
        self.memory_size = memory_size
        self.memory = deque()

    def add(self, obs, action, reward, done):
        """Add a new observation to the replay memory."""
        self.memory.append((obs, action, reward, done))
        while len(self.memory) > self.memory_size:
            self.memory.popleft()

    def __len__(self) =
        # ignore the last elem if not done as it might not have a next_obs
        len(self.memory) if self.memory[-1][-1] else max(0, len(self.memory) - 1)

    def sample(self, batch_size):
        """Sample obs_batch, action_batch, reward_batch, done_batch, next_obs_batch from the replay memory."""
        sampled_inds = random.sample(range(len(self)), batch_size)

        # only iterate through the deque once, going in reverse order
        #  so we can keep track of next_obs
        batch = []
        next_obs = None
        for i, (obs, action, reward, done) in reversed(enumerate(self.memory)):
            if done:
                next_obs = np.zeros_like(obs) * np.nan
            if i in sampled_inds:
                batch.append((obs, action, reward, done, next_obs))
            next_obs = obs

        return map(np.asarray, zip(*batch))
